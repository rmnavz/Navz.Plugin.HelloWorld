name: Deployment CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    types:
      - merged

permissions:
  contents: write    # Grants write access to the repository contents (like creating releases, pushing code)

jobs:
  build-and-test:
    uses: ./.github/workflows/ci-build-and-test.yml
    with:
      project-path: Src/Navz.Plugin.HelloWorld/Navz.Plugin.HelloWorld.csproj

  release:
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
    # Checkout the repository
    - name: Checkout code
      uses: actions/checkout@v3

    # Set up .NET
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'

    # Build the solution for release
    - name: Build Release
      run: dotnet build --configuration Release

    # Publish the project to generate DLLs and related files
    - name: Publish Plugin
      run: dotnet publish Src/Navz.Plugin.HelloWorld/Navz.Plugin.HelloWorld.csproj --configuration Release --output ./output

    # Extract Version from .csproj using grep
    - name: Extract Plugin Version
      id: extract-version
      run: |
        # Use grep to extract the version from the .csproj file
        PLUGIN_VERSION=$(grep -oPm1 "(?<=<Version>)[^<]+" Src/Navz.Plugin.HelloWorld/Navz.Plugin.HelloWorld.csproj)

        echo "Plugin version: $PLUGIN_VERSION"

        # Set the extracted PluginVersion as output
        echo "::set-output name=plugin_version::$PLUGIN_VERSION"

    # Create a GitHub release
    - name: Create GitHub Release
      id: create-release
      uses: actions/create-release@v1
      with:
        tag_name: v${{ steps.extract-version.outputs.plugin_version }}
        release_name: Release v${{ steps.extract-version.outputs.plugin_version }}
        body: "Release of plugin version ${{ steps.extract-version.outputs.plugin_version }}"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    # Create ZIP of the output folder
    - name: Create ZIP of Output
      run: |
        zip -r ./output.zip ./output/*
        echo "Created output.zip"

    # Upload release assets
    - name: Upload Release Assets
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: ./output.zip
        asset_name: Navz.Plugin.HelloWorld-${{ steps.extract-version.outputs.plugin_version }}.zip
        asset_content_type: application/zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}